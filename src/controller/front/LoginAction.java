/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package controller.front;

import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import model.ClassDAO;
import model.DepartmentDAO;
import model.DeviceDAO;
import model.ItemDAO;
import model.Keeper;
import model.KeeperDAO;
import model.LocationDAO;
import model.ModelDAO;
import model.SupplierDAO;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/** 
 * MyEclipse Struts
 * Creation date: 01-13-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class LoginAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		try {
			request.setCharacterEncoding("gb2312");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		String sn = request.getParameter("sn").trim();
		String password = request.getParameter("password").trim();
		String authority = request.getParameter("authority").trim();
		HttpSession session = request.getSession();
		
		KeeperDAO keeper_dao = new KeeperDAO();
		Keeper keeper = keeper_dao.query_keeper(sn, password);
		
		session.removeAttribute("admin");
		session.removeAttribute("keeper");
        if(keeper != null){
     
			if(keeper.getAuthority().equals("N") && authority.equals("N")){
				session.setAttribute("keeper", new Keeper(keeper.getSn(),keeper.getName(),keeper.getAuthority(),keeper.getDep_sn()));
				session.setAttribute("class_list", new ClassDAO().getClasses());
				session.setAttribute("item_list", new ItemDAO().getItem());
				session.setAttribute("supplier_list", new SupplierDAO().getSupplier());
				session.setAttribute("model_list", new ModelDAO().getModel());
				session.setAttribute("dev_list", new DeviceDAO().getDevice(((Keeper)(session.getAttribute("keeper"))).getSn()));
				session.setAttribute("device_list", new DeviceDAO().getDevice(((Keeper)(session.getAttribute("keeper"))).getSn()));
				session.setAttribute("loc_list", new LocationDAO().getLocation(((Keeper)(session.getAttribute("keeper"))).getSn()));
				session.setAttribute("dep_list", new DepartmentDAO().getDepartments());
				return mapping.findForward("success");
			}else if(keeper.getAuthority().equals("S") && authority.equals("S")){				
				session.setAttribute("admin", new Keeper(keeper.getSn(),keeper.getName(),keeper.getAuthority(),keeper.getDep_sn()));
				session.setAttribute("class_list", new ClassDAO().getClasses());
				session.setAttribute("item_list", new ItemDAO().getItem());
				session.setAttribute("supplier_list", new SupplierDAO().getSupplier());
				session.setAttribute("model_list", new ModelDAO().getModel());
				session.setAttribute("dev_list", new DeviceDAO().getDevice(0,0,0,"",""));
				session.setAttribute("device_list", new DeviceDAO().getDevice(0,0,0,"",""));
				session.setAttribute("loc_list", new LocationDAO().getAllLocation());
				session.setAttribute("keeper_list", new KeeperDAO().query_keeper());
				session.setAttribute("adminer_list", new KeeperDAO().query_adminer());
				session.setAttribute("dep_list", new DepartmentDAO().getDepartments());
				return mapping.findForward("success");
			}else if(keeper.getAuthority().equals("M") && authority.equals("M")){				
				session.setAttribute("admin", new Keeper(keeper.getSn(),keeper.getName(),keeper.getAuthority(),keeper.getDep_sn()));
				session.setAttribute("class_list", new ClassDAO().getClasses());
				session.setAttribute("item_list", new ItemDAO().getItem());
				session.setAttribute("supplier_list", new SupplierDAO().getSupplier());
				session.setAttribute("model_list", new ModelDAO().getModel());
				session.setAttribute("dev_list", new DeviceDAO().getDevice(0,0,0,"","",keeper.getDep_sn()));
				session.setAttribute("device_list", new DeviceDAO().getDevice(0,0,0,"","",keeper.getDep_sn()));
				session.setAttribute("loc_list", new LocationDAO().getLocation(keeper.getDep_sn()));
				session.setAttribute("keeper_list", new KeeperDAO().query_keeper(keeper.getDep_sn()));
				session.setAttribute("dep_list", new DepartmentDAO().getDepartments());
				return mapping.findForward("success");
			}else if(keeper.getAuthority().equals("B") && authority.equals("B")){	
				session.setAttribute("admin", new Keeper(keeper.getSn(),keeper.getName(),keeper.getAuthority(),keeper.getDep_sn()));
				return mapping.findForward("index");
			}else{
				request.setAttribute("error", "权限不正确！");
				return mapping.findForward("error");				
			}
			
			
		}else{
			
			request.setAttribute("error", "用户名或密码错误！");
			return mapping.findForward("error");
		}
		
	}
}