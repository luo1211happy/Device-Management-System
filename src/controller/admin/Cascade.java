/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package controller.admin;

import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import model.Hierarchy;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/** 
 * MyEclipse Struts
 * Creation date: 03-01-2014
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class Cascade extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		try {
            request.setCharacterEncoding("gb2312");
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        try {
            int group = 0;
            int item = 0;
            int model = 0;
            if(request.getParameter("group") != null)
            	group = Integer.parseInt(request.getParameter("group").trim());
            if(request.getParameter("item") != null)
            	item = Integer.parseInt(request.getParameter("item").trim());
            if(request.getParameter("model") != null)
            	model = Integer.parseInt(request.getParameter("model").trim());
            
            Hierarchy hierarchy = new Hierarchy(group, item, model);
            request.setAttribute("hierarchy", hierarchy);
            
            String forward = request.getParameter("forward");
            if(forward.equals("model_manage"))
                return mapping.findForward("model_manage");
            else if(forward.equals("model_update"))
            	return mapping.findForward("model_update");
            else if(forward.equals("add_device"))
            	return mapping.findForward("add_device");
            else if(forward.equals("manage_device"))
            	return mapping.findForward("manage_device");
            else if(forward.equals("basic_query"))
            	return mapping.findForward("basic_query");
            else if(forward.equals("scrap_query"))
            	return mapping.findForward("scrap_query");
            else if(forward.equals("alarm_query"))
            	return mapping.findForward("alarm_query");
            else if(forward.equals("m_alarm_query"))
            	return mapping.findForward("m_alarm_query");
            else if(forward.equals("fault_record"))
            	return mapping.findForward("fault_record");
            else if(forward.equals("fault_query"))
            	return mapping.findForward("fault_query");
            else if(forward.equals("m_fault_query"))
            	return mapping.findForward("m_fault_query");
            else if(forward.equals("m_basic_query"))
            	return mapping.findForward("m_basic_query");
            else if(forward.equals("m_scrap_query"))
            	return mapping.findForward("m_scrap_query");
            else if(forward.equals("m_update_keeper"))
            	return mapping.findForward("m_update_keeper");
            else
            	return mapping .findForward("error");

        } catch (RuntimeException re) {
            re.printStackTrace(System.err);
            return mapping.findForward("error");
        }

	}
}